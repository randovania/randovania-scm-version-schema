from __future__ import annotations

import logging
from pathlib import Path

import setuptools_scm
from dulwich.repo import Repo


def version_scheme(version: setuptools_scm.ScmVersion) -> str:
    assert isinstance(version.config, setuptools_scm.Configuration)

    git_repo = Repo(version.config.absolute_root)
    version_file = Path(version.config.absolute_root).joinpath(version.config.version_file)

    full_git_hash = repr(git_repo.head().decode("ascii"))
    try:
        git_hash = repr(bytes.fromhex(version.node[1:9]))
    except ValueError:
        logging.exception("Unable to get git hash from version %s", str(version.node))
        git_hash = None

    # We want to save the git hash to a file, so we can easily access it in frozen runtime, where git is not available.
    #
    version_file.with_name("version_hash.py").write_text(
        f"""# coding: utf-8
# file generated by setuptools_scm + setup.py
# don't change, don't track in version control
git_hash = {git_hash}
full_git_hash = {full_git_hash}
git_branch = {version.branch!r}
dirty = {version.dirty}
"""
    )

    if version.exact:
        result = setuptools_scm.version.guess_next_simple_semver(
            version, retain=setuptools_scm.version.SEMVER_LEN, increment=False
        )
    else:
        if version.branch != "stable":
            retain = setuptools_scm.version.SEMVER_MINOR
        else:
            retain = setuptools_scm.version.SEMVER_PATCH
        result = version.format_next_version(setuptools_scm.version.guess_next_simple_semver, retain=retain)
    return result
